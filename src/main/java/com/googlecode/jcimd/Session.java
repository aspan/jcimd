/*
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package com.googlecode.jcimd;

import java.io.IOException;
import java.util.Date;

/**
 * Represents a <a href="http://en.wikipedia.org/wiki/CIMD">CIMD</a>
 * (Computer Interface to Message Distribution) session. When the
 * implementation class is instantiated, a session is created by
 * sending a login operation to the SMS Center (SMSC). A session
 * is ended by calling {@link #close()} to send a logout operation.
 * 
 */
public interface Session {

	/**
	 * Closes this session by sending a logout operation.
	 * @throws SessionException if an error occurs while
	 *     closing this session (i.e. error occurs while
	 *     sending a logout operation)
	 * @throws IOException if an I/O error occurs
	 */
	void close() throws IOException, SessionException;

	/**
	 * Submits a message text (in user data) to a destination address.
	 * <p>
	 * Submit in its simplest mode just passes the message text and
	 * destination address to the SMS Center, which takes care of
	 * delivery. There are, however, also some special features that
	 * may be requested with the submit operation, for example first
	 * delivery time, or message to many recipients.
	 * <p>
	 * When the application wants to submit a message, it builds the
	 * message text and places it into the parameter user data. The
	 * text is sent with other necessary parameters to the SMS Center.
	 * The SMS Center then sends the message to the MS or another
	 * application.
	 * <p>
	 * The submitted message can be identified afterwards by using a
	 * time stamp generated by the SMS Center (returned in a submit
	 * response) and the destination address.
	 *
	 * @param destinationAddress
	 * @param originatingAddress
	 * @param alphanumericOriginatingAddress
	 * @param dataCodingScheme
	 * @param userData
	 * @param moreMessagesToSend
	 * @param validityPeriod
	 * @param protocolIdentifier
	 * @param firstDeliveryTime
	 * @param replyPathEnabled
	 * @param statusReportRequest
	 * @param cancelEnabled
	 * @param tariffClass
	 * @param serviceDescription
	 * @param priority
	 * @return time stamp generated by the SMS Center
	 * @throws IOException
	 * @throws SessionException
	 */
	Date submitMessage(String destinationAddress,
			String originatingAddress, String alphanumericOriginatingAddress,
			Integer dataCodingScheme,
			UserData userData,
			Boolean moreMessagesToSend,
			TimePeriod validityPeriod,
			Integer protocolIdentifier,
			TimePeriod firstDeliveryTime,
			Boolean replyPathEnabled,
			Integer statusReportRequest,
			Boolean cancelEnabled,
			Integer tariffClass,
			Integer serviceDescription,
			Integer priority) throws IOException, SessionException;

	/*
	void enquireMessageStatus() throws IOException, SessionException;
	void deliveryRequest() throws IOException, SessionException;
	void cancelMessage() throws IOException, SessionException;
	void deliverMessage() throws IOException, SessionException;
	void deliverStatusReport() throws IOException, SessionException;
	void set() throws IOException, SessionException;
	void get() throws IOException, SessionException;
	void alive() throws IOException, SessionException;
	void nack() throws IOException, SessionException;
	*/

}
